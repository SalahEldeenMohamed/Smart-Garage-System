
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000f8  008000f8  00000d58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ed  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a65  00000000  00000000  000022fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a9  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  0000370c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096a  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_1>
   8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_2>
   c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_3>
  10:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_4>
  14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3f       	cpi	r26, 0xFE	; 254
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8a:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_CmdWrite>:
	LCD_CmdWrite(0x01); //clear display 
}

void LCD_CmdWrite(char cmd)
{
	databus=cmd;
  92:	85 bb       	out	0x15, r24	; 21
	controlbus &=~(1<<rs); //store in the data bus
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	88 bb       	out	0x18, r24	; 24
	controlbus &=~(1<<rw); //enable write
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	88 bb       	out	0x18, r24	; 24
	controlbus |=(1<<en); //ask the lcd to start executing
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_CmdWrite+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_CmdWrite+0x1e>
  b0:	00 00       	nop
	_delay_ms(1);
	controlbus &=~(1<<en);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	89 ef       	ldi	r24, 0xF9	; 249
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_CmdWrite+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_CmdWrite+0x30>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <LCD_Init>:
#include <util/delay.h>


void LCD_Init()
{
	databus_direction=0xFF; //output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	controlbus_direction=0xFF; //output
  ca:	87 bb       	out	0x17, r24	; 23
	LCD_CmdWrite(0x38); // declare 2 lines lcd with 5*7 character matrix
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	LCD_CmdWrite(0x0E); //to power on display and show cursor
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	LCD_CmdWrite(0x01); //clear display 
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  de:	08 95       	ret

000000e0 <LCD_DataWrite>:
	_delay_ms(1); 
}

void LCD_DataWrite(char dat)
{
	databus=dat; //put char on databus
  e0:	85 bb       	out	0x15, r24	; 21
	controlbus |=(1<<rs); //store in the data register
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	88 bb       	out	0x18, r24	; 24
	controlbus &=~(1<<rw); //enable write
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	88 bb       	out	0x18, r24	; 24
	controlbus |=(1<<en); //ask the lcd to start executing
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_DataWrite+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_DataWrite+0x1e>
  fe:	00 00       	nop
	_delay_ms(1);
	controlbus &=~(1<<en);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	88 bb       	out	0x18, r24	; 24
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_DataWrite+0x2a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_DataWrite+0x30>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <LCD_DisplayString>:
	_delay_ms(1);
	
}

void LCD_DisplayString(char *string_ptr)
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	8c 01       	movw	r16, r24
	for(int i=0; i<16; i++)
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	07 c0       	rjmp	.+14     	; 0x132 <LCD_DisplayString+0x1e>
	{
		LCD_DataWrite(string_ptr[i]);
 124:	f8 01       	movw	r30, r16
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	80 81       	ld	r24, Z
 12c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DataWrite>
	
}

void LCD_DisplayString(char *string_ptr)
{
	for(int i=0; i<16; i++)
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	c0 31       	cpi	r28, 0x10	; 16
 134:	d1 05       	cpc	r29, r1
 136:	b4 f3       	brlt	.-20     	; 0x124 <LCD_DisplayString+0x10>
	{
		LCD_DataWrite(string_ptr[i]);
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <LCD_Clear>:

void LCD_Clear()
{
	LCD_CmdWrite(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
 148:	08 95       	ret

0000014a <LCD_GoToLineOne>:
}

void LCD_GoToLineOne()
{
	LCD_CmdWrite(0x80);	//move cursor to the begining of the line 
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
 150:	08 95       	ret

00000152 <LCD_GoToLineTwo>:
}

void LCD_GoToLineTwo()
{
	LCD_CmdWrite(0xC0);		
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
 158:	08 95       	ret

0000015a <IsEmpty_Message>:
}


void IsEmpty_Message()
{
	LCD_CmdWrite(0xff);  //cursor on
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	LCD_GoToLineOne();
 160:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
	LCD_DisplayString("    Welcome!    ");
 164:	80 e6       	ldi	r24, 0x60	; 96
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
			
	LCD_GoToLineTwo();
 16c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
			
	LCD_DisplayString(" Garage Is Empty");			
 170:	81 e7       	ldi	r24, 0x71	; 113
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
	LCD_CmdWrite(0x0C); //cursor off
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	
	PORTB &=~ (1<<4) & (1<<5) & (1<<6) & (1<<7);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	18 ba       	out	0x18, r1	; 24
 182:	08 95       	ret

00000184 <PlacesEmpty_Message>:
	
}

void PlacesEmpty_Message(unsigned int num)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	60 97       	sbiw	r28, 0x10	; 16
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	8c 01       	movw	r16, r24
	LCD_CmdWrite(0xff);  //cursor on
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	LCD_GoToLineOne();
 1a4:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
	LCD_DisplayString("    Welcome!    ");
 1a8:	80 e6       	ldi	r24, 0x60	; 96
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
	
	LCD_GoToLineTwo();
 1b0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
		default:
		LCD_DisplayString(" 1 Places Empty");
		LCD_CmdWrite(0x0C);
	}*/
	char str[16];
	sprintf(str, " %i Places Empty", 5-num);	
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	80 1b       	sub	r24, r16
 1ba:	91 0b       	sbc	r25, r17
 1bc:	9f 93       	push	r25
 1be:	8f 93       	push	r24
 1c0:	82 e8       	ldi	r24, 0x82	; 130
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9f 93       	push	r25
 1c6:	8f 93       	push	r24
 1c8:	8e 01       	movw	r16, r28
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	1f 93       	push	r17
 1d0:	0f 93       	push	r16
 1d2:	0e 94 2a 03 	call	0x654	; 0x654 <sprintf>
	LCD_DisplayString(&str);
 1d6:	c8 01       	movw	r24, r16
 1d8:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
	LCD_CmdWrite(0x0C);	
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	
	PORTB |= (1<<4) | (1<<5) | (1<<6) | (1<<7);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	80 6f       	ori	r24, 0xF0	; 240
 1e6:	88 bb       	out	0x18, r24	; 24
} 
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	60 96       	adiw	r28, 0x10	; 16
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <NotEmpty_Message>:

void NotEmpty_Message()
{
	
	LCD_CmdWrite(0xff);  //cursor on
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	LCD_GoToLineOne();
 210:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
	LCD_DisplayString(" Garage Is Full");
 214:	83 e9       	ldi	r24, 0x93	; 147
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
	
	LCD_GoToLineTwo();
 21c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
	
	LCD_DisplayString("               ");
 220:	83 ea       	ldi	r24, 0xA3	; 163
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
	LCD_CmdWrite(0x0C); //cursor off	
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
	
	PORTB |= (1<<4) | (1<<5) | (1<<6) | (1<<7);
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	80 6f       	ori	r24, 0xF0	; 240
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret

00000236 <main>:
unsigned int Number;


int main(void)
{
	LCD_Init();
 236:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Init>
	SERVO_INIT();
 23a:	0e 94 8c 02 	call	0x518	; 0x518 <SERVO_INIT>
	DDRA=0xFF;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
 242:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 244:	82 bb       	out	0x12, r24	; 18
	PORTA=0x00;
 246:	1b ba       	out	0x1b, r1	; 27
	DDRB &=~ (1<<2);
 248:	87 b3       	in	r24, 0x17	; 23
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<7);
 24e:	81 b3       	in	r24, 0x11	; 17
 250:	80 68       	ori	r24, 0x80	; 128
 252:	81 bb       	out	0x11, r24	; 17

	// Configure external interrupt INT0
	GICR |= (1 << 6);      // Enable external interrupt INT0
 254:	8b b7       	in	r24, 0x3b	; 59
 256:	80 64       	ori	r24, 0x40	; 64
 258:	8b bf       	out	0x3b, r24	; 59
	//MCUCR |= (1 << ISC01);    // Trigger on any  logical change for INT0 (you can change this based on your requirement)
	
	// Configure external interrupt INT1
	GICR |= (1 << 7);      // Enable external interrupt INT1
 25a:	8b b7       	in	r24, 0x3b	; 59
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	8b bf       	out	0x3b, r24	; 59
	//MCUCR |= (1 << ISC01);    // Trigger on any  logical change for INT1 (you can change this based on your requirement)
	
	// Configure external interrupt INT2
	GICR |= (1 << 5);      // Enable external interrupt INT2
 260:	8b b7       	in	r24, 0x3b	; 59
 262:	80 62       	ori	r24, 0x20	; 32
 264:	8b bf       	out	0x3b, r24	; 59
	//MCUCR |= (1 << ISC01);    // Trigger on any  logical change for INT2 (you can change this based on your requirement)
	
	sei();
 266:	78 94       	sei
	while(1)
	{
		Number=0;
 268:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <Number+0x1>
 26c:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <Number>
		if((PIND&(1<<0))==0)
 270:	80 99       	sbic	0x10, 0	; 16
 272:	06 c0       	rjmp	.+12     	; 0x280 <main+0x4a>
		{
			Number++;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Number+0x1>
 27c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Number>
		}
		if((PIND&(1<<1))==0)
 280:	81 99       	sbic	0x10, 1	; 16
 282:	09 c0       	rjmp	.+18     	; 0x296 <main+0x60>
		{
			Number++;
 284:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 288:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Number+0x1>
 292:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Number>
		}
		if((PIND&(1<<4))==0)
 296:	84 99       	sbic	0x10, 4	; 16
 298:	09 c0       	rjmp	.+18     	; 0x2ac <main+0x76>
		{
			Number++;
 29a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 29e:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Number+0x1>
 2a8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Number>
		}
		if((PIND&(1<<5))==0)
 2ac:	85 99       	sbic	0x10, 5	; 16
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <main+0x8c>
		{
			Number++;
 2b0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 2b4:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Number+0x1>
 2be:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Number>
		}
		if((PIND&(1<<6))==0)
 2c2:	86 99       	sbic	0x10, 6	; 16
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <main+0xa2>
		{
			Number++;
 2c6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 2ca:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Number+0x1>
 2d4:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Number>
		}
		
		if(Number==5)
 2d8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 2dc:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 2e0:	85 30       	cpi	r24, 0x05	; 5
 2e2:	91 05       	cpc	r25, r1
 2e4:	49 f4       	brne	.+18     	; 0x2f8 <main+0xc2>
		{
			NotEmpty_Message();
 2e6:	0e 94 05 01 	call	0x20a	; 0x20a <NotEmpty_Message>
			PORTA &=~(1<<0);
 2ea:	8b b3       	in	r24, 0x1b	; 27
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (1<<1);
 2f0:	8b b3       	in	r24, 0x1b	; 27
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	b8 cf       	rjmp	.-144    	; 0x268 <main+0x32>
		}
		else if(Number==0)
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	49 f4       	brne	.+18     	; 0x30e <main+0xd8>
		{
			IsEmpty_Message();
 2fc:	0e 94 ad 00 	call	0x15a	; 0x15a <IsEmpty_Message>
			PORTA &=~(1<<1);
 300:	8b b3       	in	r24, 0x1b	; 27
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (1<<0);
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	ad cf       	rjmp	.-166    	; 0x268 <main+0x32>
		}
		else{
			PlacesEmpty_Message(Number);
 30e:	0e 94 c2 00 	call	0x184	; 0x184 <PlacesEmpty_Message>
			PORTA &=~(1<<1);
 312:	8b b3       	in	r24, 0x1b	; 27
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (1<<0);
 318:	8b b3       	in	r24, 0x1b	; 27
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	a4 cf       	rjmp	.-184    	; 0x268 <main+0x32>

00000320 <__vector_1>:
	
	PORTB |= (1<<4) | (1<<5) | (1<<6) | (1<<7);
}

ISR(INT0_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
		LCD_CmdWrite(0xff);  //cursor on
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
		LCD_GoToLineOne();
 348:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
		LCD_DisplayString("  EMERGENCY!!!  ");
 34c:	83 eb       	ldi	r24, 0xB3	; 179
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
		
		LCD_GoToLineTwo();
 354:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
		
		LCD_DisplayString(" Fire In Garage ");
 358:	84 ec       	ldi	r24, 0xC4	; 196
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
		LCD_CmdWrite(0x0C); //cursor off
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
		
		SERVO_DEG(180);
 366:	84 eb       	ldi	r24, 0xB4	; 180
 368:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
		PORTA |=(1<<1);
 36c:	8b b3       	in	r24, 0x1b	; 27
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	8b bb       	out	0x1b, r24	; 27
		PORTA &=~(1<<0);
 372:	8b b3       	in	r24, 0x1b	; 27
 374:	8e 7f       	andi	r24, 0xFE	; 254
 376:	8b bb       	out	0x1b, r24	; 27
		int count=50;
 378:	22 e3       	ldi	r18, 0x32	; 50
 37a:	30 e0       	ldi	r19, 0x00	; 0
		while (count)
 37c:	14 c0       	rjmp	.+40     	; 0x3a6 <__vector_1+0x86>
		{
			PORTA |=(1<<2);
 37e:	8b b3       	in	r24, 0x1b	; 27
 380:	84 60       	ori	r24, 0x04	; 4
 382:	8b bb       	out	0x1b, r24	; 27
 384:	8f e4       	ldi	r24, 0x4F	; 79
 386:	93 ec       	ldi	r25, 0xC3	; 195
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <__vector_1+0x68>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <__vector_1+0x6e>
 38e:	00 00       	nop
			_delay_ms(100);
			PORTA &=~(1<<2);
 390:	8b b3       	in	r24, 0x1b	; 27
 392:	8b 7f       	andi	r24, 0xFB	; 251
 394:	8b bb       	out	0x1b, r24	; 27
 396:	8f e4       	ldi	r24, 0x4F	; 79
 398:	93 ec       	ldi	r25, 0xC3	; 195
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <__vector_1+0x7a>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <__vector_1+0x80>
 3a0:	00 00       	nop
			_delay_ms(100);
			count--;
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	31 09       	sbc	r19, r1
		
		SERVO_DEG(180);
		PORTA |=(1<<1);
		PORTA &=~(1<<0);
		int count=50;
		while (count)
 3a6:	21 15       	cp	r18, r1
 3a8:	31 05       	cpc	r19, r1
 3aa:	49 f7       	brne	.-46     	; 0x37e <__vector_1+0x5e>
			_delay_ms(100);
			PORTA &=~(1<<2);
			_delay_ms(100);
			count--;
		}
		SERVO_DEG(0) ;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_2>:

ISR(INT1_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
		if (Number!=5)
 3f6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Number>
 3fa:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Number+0x1>
 3fe:	05 97       	sbiw	r24, 0x05	; 5
 400:	61 f1       	breq	.+88     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		{
			LCD_Clear();
 402:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Clear>
			LCD_CmdWrite(0xff);  //cursor on
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
			LCD_GoToLineOne();
 40c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
			LCD_DisplayString("    Welcome!    ");
 410:	80 e6       	ldi	r24, 0x60	; 96
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
			
			LCD_GoToLineTwo();
 418:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
			
			LCD_DisplayString("Gate Is Opening.");
 41c:	85 ed       	ldi	r24, 0xD5	; 213
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
			LCD_CmdWrite(0x0C); //cursor off
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
			
			SERVO_DEG(180);
 42a:	84 eb       	ldi	r24, 0xB4	; 180
 42c:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
 430:	2f e7       	ldi	r18, 0x7F	; 127
 432:	84 e8       	ldi	r24, 0x84	; 132
 434:	9e e1       	ldi	r25, 0x1E	; 30
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
			_delay_ms(5000);
			SERVO_DEG(0) ;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
 448:	2f e7       	ldi	r18, 0x7F	; 127
 44a:	84 e8       	ldi	r24, 0x84	; 132
 44c:	9e e1       	ldi	r25, 0x1E	; 30
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
			_delay_ms(5000);
		}	
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_3>:

ISR(INT2_vect)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	
		LCD_Clear();
 49e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Clear>
		LCD_CmdWrite(0xff);  //cursor on
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
		LCD_GoToLineOne();
 4a8:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GoToLineOne>
		LCD_DisplayString("   Good Bye!!   ");
 4ac:	86 ee       	ldi	r24, 0xE6	; 230
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
		
		LCD_GoToLineTwo();
 4b4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_GoToLineTwo>
		
		LCD_DisplayString("Gate Is Opening.");
 4b8:	85 ed       	ldi	r24, 0xD5	; 213
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_DisplayString>
		LCD_CmdWrite(0x0C); //cursor off
 4c0:	8c e0       	ldi	r24, 0x0C	; 12
 4c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
		
		SERVO_DEG(180);
 4c6:	84 eb       	ldi	r24, 0xB4	; 180
 4c8:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
 4cc:	2f e7       	ldi	r18, 0x7F	; 127
 4ce:	84 e8       	ldi	r24, 0x84	; 132
 4d0:	9e e1       	ldi	r25, 0x1E	; 30
 4d2:	21 50       	subi	r18, 0x01	; 1
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__vector_3+0x56>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__vector_3+0x60>
 4dc:	00 00       	nop
		_delay_ms(5000);
		SERVO_DEG(0) ;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 a5 02 	call	0x54a	; 0x54a <SERVO_DEG>
 4e4:	2f e7       	ldi	r18, 0x7F	; 127
 4e6:	84 e8       	ldi	r24, 0x84	; 132
 4e8:	9e e1       	ldi	r25, 0x1E	; 30
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <__vector_3+0x6e>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__vector_3+0x78>
 4f4:	00 00       	nop
		_delay_ms(5000);
	
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <SERVO_INIT>:
 *  Author: Eng_A
 */ 
#include "SERVO.h"

void SERVO_INIT()
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <SERVO_INIT+0x6>
 51e:	1f 92       	push	r1
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	
	TIMER2_CONF CONF = {compare_mode,N_128,OC2_SET} ;
 524:	80 ec       	ldi	r24, 0xC0	; 192
 526:	89 83       	std	Y+1, r24	; 0x01
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	80 e3       	ldi	r24, 0x30	; 48
 52e:	8b 83       	std	Y+3, r24	; 0x03
		TIMER2_INIT(&CONF) ;
 530:	ce 01       	movw	r24, r28
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	0e 94 b1 02 	call	0x562	; 0x562 <TIMER2_INIT>
		BIT_SET(DDRD,7) ;
 538:	81 b3       	in	r24, 0x11	; 17
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	81 bb       	out	0x11, r24	; 17
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <SERVO_DEG>:
void SERVO_DEG(uint8 deg) 
{
	if ( deg == 0 )
 54a:	81 11       	cpse	r24, r1
 54c:	04 c0       	rjmp	.+8      	; 0x556 <SERVO_DEG+0xc>
	{
		TIMER2_SetCompare(250);
 54e:	8a ef       	ldi	r24, 0xFA	; 250
 550:	0e 94 d6 02 	call	0x5ac	; 0x5ac <TIMER2_SetCompare>
 554:	08 95       	ret
	}
	else if ( deg == 180 ) 
 556:	84 3b       	cpi	r24, 0xB4	; 180
 558:	19 f4       	brne	.+6      	; 0x560 <SERVO_DEG+0x16>
	{
		TIMER2_SetCompare(230);
 55a:	86 ee       	ldi	r24, 0xE6	; 230
 55c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <TIMER2_SetCompare>
 560:	08 95       	ret

00000562 <TIMER2_INIT>:
		flag = 1 ;
	}
	
	return Time ;
	
}
 562:	fc 01       	movw	r30, r24
 564:	78 94       	sei
 566:	14 bc       	out	0x24, r1	; 36
 568:	95 b5       	in	r25, 0x25	; 37
 56a:	80 81       	ld	r24, Z
 56c:	89 2b       	or	r24, r25
 56e:	85 bd       	out	0x25, r24	; 37
 570:	95 b5       	in	r25, 0x25	; 37
 572:	81 81       	ldd	r24, Z+1	; 0x01
 574:	89 2b       	or	r24, r25
 576:	85 bd       	out	0x25, r24	; 37
 578:	95 b5       	in	r25, 0x25	; 37
 57a:	82 81       	ldd	r24, Z+2	; 0x02
 57c:	89 2b       	or	r24, r25
 57e:	85 bd       	out	0x25, r24	; 37
 580:	80 81       	ld	r24, Z
 582:	88 23       	and	r24, r24
 584:	61 f0       	breq	.+24     	; 0x59e <TIMER2_INIT+0x3c>
 586:	80 3c       	cpi	r24, 0xC0	; 192
 588:	81 f4       	brne	.+32     	; 0x5aa <TIMER2_INIT+0x48>
 58a:	8b b3       	in	r24, 0x1b	; 27
 58c:	84 60       	ori	r24, 0x04	; 4
 58e:	8b bb       	out	0x1b, r24	; 27
 590:	89 b7       	in	r24, 0x39	; 57
 592:	80 68       	ori	r24, 0x80	; 128
 594:	89 bf       	out	0x39, r24	; 57
 596:	89 b7       	in	r24, 0x39	; 57
 598:	8f 7b       	andi	r24, 0xBF	; 191
 59a:	89 bf       	out	0x39, r24	; 57
 59c:	08 95       	ret
 59e:	89 b7       	in	r24, 0x39	; 57
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	89 bf       	out	0x39, r24	; 57
 5a4:	89 b7       	in	r24, 0x39	; 57
 5a6:	8f 77       	andi	r24, 0x7F	; 127
 5a8:	89 bf       	out	0x39, r24	; 57
 5aa:	08 95       	ret

000005ac <TIMER2_SetCompare>:
 5ac:	83 bd       	out	0x23, r24	; 35
 5ae:	08 95       	ret

000005b0 <__vector_5>:
void add_clks_2(void)
{
	Time++;
}
ISR(TIMER2_OVF_vect)
{
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	if (call_back_T2 != NULL_PTR)
 5d2:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <__data_end>
 5d6:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <__data_end+0x1>
 5da:	30 97       	sbiw	r30, 0x00	; 0
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_5+0x30>
	{
		call_back_T2();
 5de:	09 95       	icall
	}
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
	if (call_back_T2 != NULL_PTR)
 624:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <__data_end>
 628:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <__data_end+0x1>
 62c:	30 97       	sbiw	r30, 0x00	; 0
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_4+0x30>
	{
		call_back_T2();
 630:	09 95       	icall
	}
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <sprintf>:
 654:	ae e0       	ldi	r26, 0x0E	; 14
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	e0 e3       	ldi	r30, 0x30	; 48
 65a:	f3 e0       	ldi	r31, 0x03	; 3
 65c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__prologue_saves__+0x1c>
 660:	0d 89       	ldd	r16, Y+21	; 0x15
 662:	1e 89       	ldd	r17, Y+22	; 0x16
 664:	86 e0       	ldi	r24, 0x06	; 6
 666:	8c 83       	std	Y+4, r24	; 0x04
 668:	1a 83       	std	Y+2, r17	; 0x02
 66a:	09 83       	std	Y+1, r16	; 0x01
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	9f e7       	ldi	r25, 0x7F	; 127
 670:	9e 83       	std	Y+6, r25	; 0x06
 672:	8d 83       	std	Y+5, r24	; 0x05
 674:	ae 01       	movw	r20, r28
 676:	47 5e       	subi	r20, 0xE7	; 231
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	6f 89       	ldd	r22, Y+23	; 0x17
 67c:	78 8d       	ldd	r23, Y+24	; 0x18
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 4c 03 	call	0x698	; 0x698 <vfprintf>
 686:	ef 81       	ldd	r30, Y+7	; 0x07
 688:	f8 85       	ldd	r31, Y+8	; 0x08
 68a:	e0 0f       	add	r30, r16
 68c:	f1 1f       	adc	r31, r17
 68e:	10 82       	st	Z, r1
 690:	2e 96       	adiw	r28, 0x0e	; 14
 692:	e4 e0       	ldi	r30, 0x04	; 4
 694:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__epilogue_restores__+0x1c>

00000698 <vfprintf>:
 698:	ab e0       	ldi	r26, 0x0B	; 11
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	e2 e5       	ldi	r30, 0x52	; 82
 69e:	f3 e0       	ldi	r31, 0x03	; 3
 6a0:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__prologue_saves__>
 6a4:	6c 01       	movw	r12, r24
 6a6:	7b 01       	movw	r14, r22
 6a8:	8a 01       	movw	r16, r20
 6aa:	fc 01       	movw	r30, r24
 6ac:	17 82       	std	Z+7, r1	; 0x07
 6ae:	16 82       	std	Z+6, r1	; 0x06
 6b0:	83 81       	ldd	r24, Z+3	; 0x03
 6b2:	81 ff       	sbrs	r24, 1
 6b4:	cc c1       	rjmp	.+920    	; 0xa4e <__stack+0x1ef>
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	3c 01       	movw	r6, r24
 6bc:	f6 01       	movw	r30, r12
 6be:	93 81       	ldd	r25, Z+3	; 0x03
 6c0:	f7 01       	movw	r30, r14
 6c2:	93 fd       	sbrc	r25, 3
 6c4:	85 91       	lpm	r24, Z+
 6c6:	93 ff       	sbrs	r25, 3
 6c8:	81 91       	ld	r24, Z+
 6ca:	7f 01       	movw	r14, r30
 6cc:	88 23       	and	r24, r24
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <vfprintf+0x3a>
 6d0:	ba c1       	rjmp	.+884    	; 0xa46 <__stack+0x1e7>
 6d2:	85 32       	cpi	r24, 0x25	; 37
 6d4:	39 f4       	brne	.+14     	; 0x6e4 <vfprintf+0x4c>
 6d6:	93 fd       	sbrc	r25, 3
 6d8:	85 91       	lpm	r24, Z+
 6da:	93 ff       	sbrs	r25, 3
 6dc:	81 91       	ld	r24, Z+
 6de:	7f 01       	movw	r14, r30
 6e0:	85 32       	cpi	r24, 0x25	; 37
 6e2:	29 f4       	brne	.+10     	; 0x6ee <vfprintf+0x56>
 6e4:	b6 01       	movw	r22, r12
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 6ec:	e7 cf       	rjmp	.-50     	; 0x6bc <vfprintf+0x24>
 6ee:	91 2c       	mov	r9, r1
 6f0:	21 2c       	mov	r2, r1
 6f2:	31 2c       	mov	r3, r1
 6f4:	ff e1       	ldi	r31, 0x1F	; 31
 6f6:	f3 15       	cp	r31, r3
 6f8:	d8 f0       	brcs	.+54     	; 0x730 <vfprintf+0x98>
 6fa:	8b 32       	cpi	r24, 0x2B	; 43
 6fc:	79 f0       	breq	.+30     	; 0x71c <vfprintf+0x84>
 6fe:	38 f4       	brcc	.+14     	; 0x70e <vfprintf+0x76>
 700:	80 32       	cpi	r24, 0x20	; 32
 702:	79 f0       	breq	.+30     	; 0x722 <vfprintf+0x8a>
 704:	83 32       	cpi	r24, 0x23	; 35
 706:	a1 f4       	brne	.+40     	; 0x730 <vfprintf+0x98>
 708:	23 2d       	mov	r18, r3
 70a:	20 61       	ori	r18, 0x10	; 16
 70c:	1d c0       	rjmp	.+58     	; 0x748 <vfprintf+0xb0>
 70e:	8d 32       	cpi	r24, 0x2D	; 45
 710:	61 f0       	breq	.+24     	; 0x72a <vfprintf+0x92>
 712:	80 33       	cpi	r24, 0x30	; 48
 714:	69 f4       	brne	.+26     	; 0x730 <vfprintf+0x98>
 716:	23 2d       	mov	r18, r3
 718:	21 60       	ori	r18, 0x01	; 1
 71a:	16 c0       	rjmp	.+44     	; 0x748 <vfprintf+0xb0>
 71c:	83 2d       	mov	r24, r3
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	38 2e       	mov	r3, r24
 722:	e3 2d       	mov	r30, r3
 724:	e4 60       	ori	r30, 0x04	; 4
 726:	3e 2e       	mov	r3, r30
 728:	2a c0       	rjmp	.+84     	; 0x77e <vfprintf+0xe6>
 72a:	f3 2d       	mov	r31, r3
 72c:	f8 60       	ori	r31, 0x08	; 8
 72e:	1d c0       	rjmp	.+58     	; 0x76a <vfprintf+0xd2>
 730:	37 fc       	sbrc	r3, 7
 732:	2d c0       	rjmp	.+90     	; 0x78e <vfprintf+0xf6>
 734:	20 ed       	ldi	r18, 0xD0	; 208
 736:	28 0f       	add	r18, r24
 738:	2a 30       	cpi	r18, 0x0A	; 10
 73a:	40 f0       	brcs	.+16     	; 0x74c <vfprintf+0xb4>
 73c:	8e 32       	cpi	r24, 0x2E	; 46
 73e:	b9 f4       	brne	.+46     	; 0x76e <vfprintf+0xd6>
 740:	36 fc       	sbrc	r3, 6
 742:	81 c1       	rjmp	.+770    	; 0xa46 <__stack+0x1e7>
 744:	23 2d       	mov	r18, r3
 746:	20 64       	ori	r18, 0x40	; 64
 748:	32 2e       	mov	r3, r18
 74a:	19 c0       	rjmp	.+50     	; 0x77e <vfprintf+0xe6>
 74c:	36 fe       	sbrs	r3, 6
 74e:	06 c0       	rjmp	.+12     	; 0x75c <vfprintf+0xc4>
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	98 9e       	mul	r9, r24
 754:	20 0d       	add	r18, r0
 756:	11 24       	eor	r1, r1
 758:	92 2e       	mov	r9, r18
 75a:	11 c0       	rjmp	.+34     	; 0x77e <vfprintf+0xe6>
 75c:	ea e0       	ldi	r30, 0x0A	; 10
 75e:	2e 9e       	mul	r2, r30
 760:	20 0d       	add	r18, r0
 762:	11 24       	eor	r1, r1
 764:	22 2e       	mov	r2, r18
 766:	f3 2d       	mov	r31, r3
 768:	f0 62       	ori	r31, 0x20	; 32
 76a:	3f 2e       	mov	r3, r31
 76c:	08 c0       	rjmp	.+16     	; 0x77e <vfprintf+0xe6>
 76e:	8c 36       	cpi	r24, 0x6C	; 108
 770:	21 f4       	brne	.+8      	; 0x77a <vfprintf+0xe2>
 772:	83 2d       	mov	r24, r3
 774:	80 68       	ori	r24, 0x80	; 128
 776:	38 2e       	mov	r3, r24
 778:	02 c0       	rjmp	.+4      	; 0x77e <vfprintf+0xe6>
 77a:	88 36       	cpi	r24, 0x68	; 104
 77c:	41 f4       	brne	.+16     	; 0x78e <vfprintf+0xf6>
 77e:	f7 01       	movw	r30, r14
 780:	93 fd       	sbrc	r25, 3
 782:	85 91       	lpm	r24, Z+
 784:	93 ff       	sbrs	r25, 3
 786:	81 91       	ld	r24, Z+
 788:	7f 01       	movw	r14, r30
 78a:	81 11       	cpse	r24, r1
 78c:	b3 cf       	rjmp	.-154    	; 0x6f4 <vfprintf+0x5c>
 78e:	98 2f       	mov	r25, r24
 790:	9f 7d       	andi	r25, 0xDF	; 223
 792:	95 54       	subi	r25, 0x45	; 69
 794:	93 30       	cpi	r25, 0x03	; 3
 796:	28 f4       	brcc	.+10     	; 0x7a2 <vfprintf+0x10a>
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	9f e3       	ldi	r25, 0x3F	; 63
 79e:	99 83       	std	Y+1, r25	; 0x01
 7a0:	0d c0       	rjmp	.+26     	; 0x7bc <vfprintf+0x124>
 7a2:	83 36       	cpi	r24, 0x63	; 99
 7a4:	31 f0       	breq	.+12     	; 0x7b2 <vfprintf+0x11a>
 7a6:	83 37       	cpi	r24, 0x73	; 115
 7a8:	71 f0       	breq	.+28     	; 0x7c6 <vfprintf+0x12e>
 7aa:	83 35       	cpi	r24, 0x53	; 83
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <vfprintf+0x118>
 7ae:	59 c0       	rjmp	.+178    	; 0x862 <__stack+0x3>
 7b0:	21 c0       	rjmp	.+66     	; 0x7f4 <vfprintf+0x15c>
 7b2:	f8 01       	movw	r30, r16
 7b4:	80 81       	ld	r24, Z
 7b6:	89 83       	std	Y+1, r24	; 0x01
 7b8:	0e 5f       	subi	r16, 0xFE	; 254
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	88 24       	eor	r8, r8
 7be:	83 94       	inc	r8
 7c0:	91 2c       	mov	r9, r1
 7c2:	53 01       	movw	r10, r6
 7c4:	13 c0       	rjmp	.+38     	; 0x7ec <vfprintf+0x154>
 7c6:	28 01       	movw	r4, r16
 7c8:	f2 e0       	ldi	r31, 0x02	; 2
 7ca:	4f 0e       	add	r4, r31
 7cc:	51 1c       	adc	r5, r1
 7ce:	f8 01       	movw	r30, r16
 7d0:	a0 80       	ld	r10, Z
 7d2:	b1 80       	ldd	r11, Z+1	; 0x01
 7d4:	36 fe       	sbrs	r3, 6
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x146>
 7d8:	69 2d       	mov	r22, r9
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x14a>
 7de:	6f ef       	ldi	r22, 0xFF	; 255
 7e0:	7f ef       	ldi	r23, 0xFF	; 255
 7e2:	c5 01       	movw	r24, r10
 7e4:	0e 94 38 05 	call	0xa70	; 0xa70 <strnlen>
 7e8:	4c 01       	movw	r8, r24
 7ea:	82 01       	movw	r16, r4
 7ec:	f3 2d       	mov	r31, r3
 7ee:	ff 77       	andi	r31, 0x7F	; 127
 7f0:	3f 2e       	mov	r3, r31
 7f2:	16 c0       	rjmp	.+44     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7f4:	28 01       	movw	r4, r16
 7f6:	22 e0       	ldi	r18, 0x02	; 2
 7f8:	42 0e       	add	r4, r18
 7fa:	51 1c       	adc	r5, r1
 7fc:	f8 01       	movw	r30, r16
 7fe:	a0 80       	ld	r10, Z
 800:	b1 80       	ldd	r11, Z+1	; 0x01
 802:	36 fe       	sbrs	r3, 6
 804:	03 c0       	rjmp	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	69 2d       	mov	r22, r9
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	6f ef       	ldi	r22, 0xFF	; 255
 80e:	7f ef       	ldi	r23, 0xFF	; 255
 810:	c5 01       	movw	r24, r10
 812:	0e 94 2d 05 	call	0xa5a	; 0xa5a <strnlen_P>
 816:	4c 01       	movw	r8, r24
 818:	f3 2d       	mov	r31, r3
 81a:	f0 68       	ori	r31, 0x80	; 128
 81c:	3f 2e       	mov	r3, r31
 81e:	82 01       	movw	r16, r4
 820:	33 fc       	sbrc	r3, 3
 822:	1b c0       	rjmp	.+54     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 824:	82 2d       	mov	r24, r2
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	88 16       	cp	r8, r24
 82a:	99 06       	cpc	r9, r25
 82c:	b0 f4       	brcc	.+44     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 82e:	b6 01       	movw	r22, r12
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 838:	2a 94       	dec	r2
 83a:	f4 cf       	rjmp	.-24     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 83c:	f5 01       	movw	r30, r10
 83e:	37 fc       	sbrc	r3, 7
 840:	85 91       	lpm	r24, Z+
 842:	37 fe       	sbrs	r3, 7
 844:	81 91       	ld	r24, Z+
 846:	5f 01       	movw	r10, r30
 848:	b6 01       	movw	r22, r12
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 850:	21 10       	cpse	r2, r1
 852:	2a 94       	dec	r2
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	82 1a       	sub	r8, r18
 858:	91 08       	sbc	r9, r1
 85a:	81 14       	cp	r8, r1
 85c:	91 04       	cpc	r9, r1
 85e:	71 f7       	brne	.-36     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 860:	e8 c0       	rjmp	.+464    	; 0xa32 <__stack+0x1d3>
 862:	84 36       	cpi	r24, 0x64	; 100
 864:	11 f0       	breq	.+4      	; 0x86a <__stack+0xb>
 866:	89 36       	cpi	r24, 0x69	; 105
 868:	41 f5       	brne	.+80     	; 0x8ba <__stack+0x5b>
 86a:	f8 01       	movw	r30, r16
 86c:	37 fe       	sbrs	r3, 7
 86e:	07 c0       	rjmp	.+14     	; 0x87e <__stack+0x1f>
 870:	60 81       	ld	r22, Z
 872:	71 81       	ldd	r23, Z+1	; 0x01
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	93 81       	ldd	r25, Z+3	; 0x03
 878:	0c 5f       	subi	r16, 0xFC	; 252
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	08 c0       	rjmp	.+16     	; 0x88e <__stack+0x2f>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	07 2e       	mov	r0, r23
 884:	00 0c       	add	r0, r0
 886:	88 0b       	sbc	r24, r24
 888:	99 0b       	sbc	r25, r25
 88a:	0e 5f       	subi	r16, 0xFE	; 254
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	f3 2d       	mov	r31, r3
 890:	ff 76       	andi	r31, 0x6F	; 111
 892:	3f 2e       	mov	r3, r31
 894:	97 ff       	sbrs	r25, 7
 896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
 898:	90 95       	com	r25
 89a:	80 95       	com	r24
 89c:	70 95       	com	r23
 89e:	61 95       	neg	r22
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	f0 68       	ori	r31, 0x80	; 128
 8a8:	3f 2e       	mov	r3, r31
 8aa:	2a e0       	ldi	r18, 0x0A	; 10
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	a3 01       	movw	r20, r6
 8b0:	0e 94 7f 05 	call	0xafe	; 0xafe <__ultoa_invert>
 8b4:	88 2e       	mov	r8, r24
 8b6:	86 18       	sub	r8, r6
 8b8:	45 c0       	rjmp	.+138    	; 0x944 <__stack+0xe5>
 8ba:	85 37       	cpi	r24, 0x75	; 117
 8bc:	31 f4       	brne	.+12     	; 0x8ca <__stack+0x6b>
 8be:	23 2d       	mov	r18, r3
 8c0:	2f 7e       	andi	r18, 0xEF	; 239
 8c2:	b2 2e       	mov	r11, r18
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	25 c0       	rjmp	.+74     	; 0x914 <__stack+0xb5>
 8ca:	93 2d       	mov	r25, r3
 8cc:	99 7f       	andi	r25, 0xF9	; 249
 8ce:	b9 2e       	mov	r11, r25
 8d0:	8f 36       	cpi	r24, 0x6F	; 111
 8d2:	c1 f0       	breq	.+48     	; 0x904 <__stack+0xa5>
 8d4:	18 f4       	brcc	.+6      	; 0x8dc <__stack+0x7d>
 8d6:	88 35       	cpi	r24, 0x58	; 88
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <__stack+0x99>
 8da:	b5 c0       	rjmp	.+362    	; 0xa46 <__stack+0x1e7>
 8dc:	80 37       	cpi	r24, 0x70	; 112
 8de:	19 f0       	breq	.+6      	; 0x8e6 <__stack+0x87>
 8e0:	88 37       	cpi	r24, 0x78	; 120
 8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
 8e4:	b0 c0       	rjmp	.+352    	; 0xa46 <__stack+0x1e7>
 8e6:	e9 2f       	mov	r30, r25
 8e8:	e0 61       	ori	r30, 0x10	; 16
 8ea:	be 2e       	mov	r11, r30
 8ec:	b4 fe       	sbrs	r11, 4
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xab>
 8f0:	fb 2d       	mov	r31, r11
 8f2:	f4 60       	ori	r31, 0x04	; 4
 8f4:	bf 2e       	mov	r11, r31
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xab>
 8f8:	34 fe       	sbrs	r3, 4
 8fa:	0a c0       	rjmp	.+20     	; 0x910 <__stack+0xb1>
 8fc:	29 2f       	mov	r18, r25
 8fe:	26 60       	ori	r18, 0x06	; 6
 900:	b2 2e       	mov	r11, r18
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0xb1>
 904:	28 e0       	ldi	r18, 0x08	; 8
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0xb5>
 90a:	20 e1       	ldi	r18, 0x10	; 16
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	20 e1       	ldi	r18, 0x10	; 16
 912:	32 e0       	ldi	r19, 0x02	; 2
 914:	f8 01       	movw	r30, r16
 916:	b7 fe       	sbrs	r11, 7
 918:	07 c0       	rjmp	.+14     	; 0x928 <__stack+0xc9>
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	82 81       	ldd	r24, Z+2	; 0x02
 920:	93 81       	ldd	r25, Z+3	; 0x03
 922:	0c 5f       	subi	r16, 0xFC	; 252
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	06 c0       	rjmp	.+12     	; 0x934 <__stack+0xd5>
 928:	60 81       	ld	r22, Z
 92a:	71 81       	ldd	r23, Z+1	; 0x01
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 5f       	subi	r16, 0xFE	; 254
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	a3 01       	movw	r20, r6
 936:	0e 94 7f 05 	call	0xafe	; 0xafe <__ultoa_invert>
 93a:	88 2e       	mov	r8, r24
 93c:	86 18       	sub	r8, r6
 93e:	fb 2d       	mov	r31, r11
 940:	ff 77       	andi	r31, 0x7F	; 127
 942:	3f 2e       	mov	r3, r31
 944:	36 fe       	sbrs	r3, 6
 946:	0d c0       	rjmp	.+26     	; 0x962 <__stack+0x103>
 948:	23 2d       	mov	r18, r3
 94a:	2e 7f       	andi	r18, 0xFE	; 254
 94c:	a2 2e       	mov	r10, r18
 94e:	89 14       	cp	r8, r9
 950:	58 f4       	brcc	.+22     	; 0x968 <__stack+0x109>
 952:	34 fe       	sbrs	r3, 4
 954:	0b c0       	rjmp	.+22     	; 0x96c <__stack+0x10d>
 956:	32 fc       	sbrc	r3, 2
 958:	09 c0       	rjmp	.+18     	; 0x96c <__stack+0x10d>
 95a:	83 2d       	mov	r24, r3
 95c:	8e 7e       	andi	r24, 0xEE	; 238
 95e:	a8 2e       	mov	r10, r24
 960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x10d>
 962:	b8 2c       	mov	r11, r8
 964:	a3 2c       	mov	r10, r3
 966:	03 c0       	rjmp	.+6      	; 0x96e <__stack+0x10f>
 968:	b8 2c       	mov	r11, r8
 96a:	01 c0       	rjmp	.+2      	; 0x96e <__stack+0x10f>
 96c:	b9 2c       	mov	r11, r9
 96e:	a4 fe       	sbrs	r10, 4
 970:	0f c0       	rjmp	.+30     	; 0x990 <__stack+0x131>
 972:	fe 01       	movw	r30, r28
 974:	e8 0d       	add	r30, r8
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	80 33       	cpi	r24, 0x30	; 48
 97c:	21 f4       	brne	.+8      	; 0x986 <__stack+0x127>
 97e:	9a 2d       	mov	r25, r10
 980:	99 7e       	andi	r25, 0xE9	; 233
 982:	a9 2e       	mov	r10, r25
 984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x139>
 986:	a2 fe       	sbrs	r10, 2
 988:	06 c0       	rjmp	.+12     	; 0x996 <__stack+0x137>
 98a:	b3 94       	inc	r11
 98c:	b3 94       	inc	r11
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__stack+0x139>
 990:	8a 2d       	mov	r24, r10
 992:	86 78       	andi	r24, 0x86	; 134
 994:	09 f0       	breq	.+2      	; 0x998 <__stack+0x139>
 996:	b3 94       	inc	r11
 998:	a3 fc       	sbrc	r10, 3
 99a:	11 c0       	rjmp	.+34     	; 0x9be <__stack+0x15f>
 99c:	a0 fe       	sbrs	r10, 0
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <__stack+0x14d>
 9a0:	b2 14       	cp	r11, r2
 9a2:	88 f4       	brcc	.+34     	; 0x9c6 <__stack+0x167>
 9a4:	28 0c       	add	r2, r8
 9a6:	92 2c       	mov	r9, r2
 9a8:	9b 18       	sub	r9, r11
 9aa:	0e c0       	rjmp	.+28     	; 0x9c8 <__stack+0x169>
 9ac:	b2 14       	cp	r11, r2
 9ae:	60 f4       	brcc	.+24     	; 0x9c8 <__stack+0x169>
 9b0:	b6 01       	movw	r22, r12
 9b2:	80 e2       	ldi	r24, 0x20	; 32
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 9ba:	b3 94       	inc	r11
 9bc:	f7 cf       	rjmp	.-18     	; 0x9ac <__stack+0x14d>
 9be:	b2 14       	cp	r11, r2
 9c0:	18 f4       	brcc	.+6      	; 0x9c8 <__stack+0x169>
 9c2:	2b 18       	sub	r2, r11
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0x16b>
 9c6:	98 2c       	mov	r9, r8
 9c8:	21 2c       	mov	r2, r1
 9ca:	a4 fe       	sbrs	r10, 4
 9cc:	10 c0       	rjmp	.+32     	; 0x9ee <__stack+0x18f>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e3       	ldi	r24, 0x30	; 48
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 9d8:	a2 fe       	sbrs	r10, 2
 9da:	17 c0       	rjmp	.+46     	; 0xa0a <__stack+0x1ab>
 9dc:	a1 fc       	sbrc	r10, 1
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__stack+0x187>
 9e0:	88 e7       	ldi	r24, 0x78	; 120
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__stack+0x18b>
 9e6:	88 e5       	ldi	r24, 0x58	; 88
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	b6 01       	movw	r22, r12
 9ec:	0c c0       	rjmp	.+24     	; 0xa06 <__stack+0x1a7>
 9ee:	8a 2d       	mov	r24, r10
 9f0:	86 78       	andi	r24, 0x86	; 134
 9f2:	59 f0       	breq	.+22     	; 0xa0a <__stack+0x1ab>
 9f4:	a1 fe       	sbrs	r10, 1
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__stack+0x19d>
 9f8:	8b e2       	ldi	r24, 0x2B	; 43
 9fa:	01 c0       	rjmp	.+2      	; 0x9fe <__stack+0x19f>
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	a7 fc       	sbrc	r10, 7
 a00:	8d e2       	ldi	r24, 0x2D	; 45
 a02:	b6 01       	movw	r22, r12
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 a0a:	89 14       	cp	r8, r9
 a0c:	38 f4       	brcc	.+14     	; 0xa1c <__stack+0x1bd>
 a0e:	b6 01       	movw	r22, r12
 a10:	80 e3       	ldi	r24, 0x30	; 48
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 a18:	9a 94       	dec	r9
 a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <__stack+0x1ab>
 a1c:	8a 94       	dec	r8
 a1e:	f3 01       	movw	r30, r6
 a20:	e8 0d       	add	r30, r8
 a22:	f1 1d       	adc	r31, r1
 a24:	80 81       	ld	r24, Z
 a26:	b6 01       	movw	r22, r12
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 a2e:	81 10       	cpse	r8, r1
 a30:	f5 cf       	rjmp	.-22     	; 0xa1c <__stack+0x1bd>
 a32:	22 20       	and	r2, r2
 a34:	09 f4       	brne	.+2      	; 0xa38 <__stack+0x1d9>
 a36:	42 ce       	rjmp	.-892    	; 0x6bc <vfprintf+0x24>
 a38:	b6 01       	movw	r22, r12
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 43 05 	call	0xa86	; 0xa86 <fputc>
 a42:	2a 94       	dec	r2
 a44:	f6 cf       	rjmp	.-20     	; 0xa32 <__stack+0x1d3>
 a46:	f6 01       	movw	r30, r12
 a48:	86 81       	ldd	r24, Z+6	; 0x06
 a4a:	97 81       	ldd	r25, Z+7	; 0x07
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__stack+0x1f3>
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	9f ef       	ldi	r25, 0xFF	; 255
 a52:	2b 96       	adiw	r28, 0x0b	; 11
 a54:	e2 e1       	ldi	r30, 0x12	; 18
 a56:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__epilogue_restores__>

00000a5a <strnlen_P>:
 a5a:	fc 01       	movw	r30, r24
 a5c:	05 90       	lpm	r0, Z+
 a5e:	61 50       	subi	r22, 0x01	; 1
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	01 10       	cpse	r0, r1
 a64:	d8 f7       	brcc	.-10     	; 0xa5c <strnlen_P+0x2>
 a66:	80 95       	com	r24
 a68:	90 95       	com	r25
 a6a:	8e 0f       	add	r24, r30
 a6c:	9f 1f       	adc	r25, r31
 a6e:	08 95       	ret

00000a70 <strnlen>:
 a70:	fc 01       	movw	r30, r24
 a72:	61 50       	subi	r22, 0x01	; 1
 a74:	70 40       	sbci	r23, 0x00	; 0
 a76:	01 90       	ld	r0, Z+
 a78:	01 10       	cpse	r0, r1
 a7a:	d8 f7       	brcc	.-10     	; 0xa72 <strnlen+0x2>
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	8e 0f       	add	r24, r30
 a82:	9f 1f       	adc	r25, r31
 a84:	08 95       	ret

00000a86 <fputc>:
 a86:	0f 93       	push	r16
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	fb 01       	movw	r30, r22
 a90:	23 81       	ldd	r18, Z+3	; 0x03
 a92:	21 fd       	sbrc	r18, 1
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <fputc+0x16>
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	9f ef       	ldi	r25, 0xFF	; 255
 a9a:	2c c0       	rjmp	.+88     	; 0xaf4 <fputc+0x6e>
 a9c:	22 ff       	sbrs	r18, 2
 a9e:	16 c0       	rjmp	.+44     	; 0xacc <fputc+0x46>
 aa0:	46 81       	ldd	r20, Z+6	; 0x06
 aa2:	57 81       	ldd	r21, Z+7	; 0x07
 aa4:	24 81       	ldd	r18, Z+4	; 0x04
 aa6:	35 81       	ldd	r19, Z+5	; 0x05
 aa8:	42 17       	cp	r20, r18
 aaa:	53 07       	cpc	r21, r19
 aac:	44 f4       	brge	.+16     	; 0xabe <fputc+0x38>
 aae:	a0 81       	ld	r26, Z
 ab0:	b1 81       	ldd	r27, Z+1	; 0x01
 ab2:	9d 01       	movw	r18, r26
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	3f 4f       	sbci	r19, 0xFF	; 255
 ab8:	31 83       	std	Z+1, r19	; 0x01
 aba:	20 83       	st	Z, r18
 abc:	8c 93       	st	X, r24
 abe:	26 81       	ldd	r18, Z+6	; 0x06
 ac0:	37 81       	ldd	r19, Z+7	; 0x07
 ac2:	2f 5f       	subi	r18, 0xFF	; 255
 ac4:	3f 4f       	sbci	r19, 0xFF	; 255
 ac6:	37 83       	std	Z+7, r19	; 0x07
 ac8:	26 83       	std	Z+6, r18	; 0x06
 aca:	14 c0       	rjmp	.+40     	; 0xaf4 <fputc+0x6e>
 acc:	8b 01       	movw	r16, r22
 ace:	ec 01       	movw	r28, r24
 ad0:	fb 01       	movw	r30, r22
 ad2:	00 84       	ldd	r0, Z+8	; 0x08
 ad4:	f1 85       	ldd	r31, Z+9	; 0x09
 ad6:	e0 2d       	mov	r30, r0
 ad8:	09 95       	icall
 ada:	89 2b       	or	r24, r25
 adc:	e1 f6       	brne	.-72     	; 0xa96 <fputc+0x10>
 ade:	d8 01       	movw	r26, r16
 ae0:	16 96       	adiw	r26, 0x06	; 6
 ae2:	8d 91       	ld	r24, X+
 ae4:	9c 91       	ld	r25, X
 ae6:	17 97       	sbiw	r26, 0x07	; 7
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	17 96       	adiw	r26, 0x07	; 7
 aec:	9c 93       	st	X, r25
 aee:	8e 93       	st	-X, r24
 af0:	16 97       	sbiw	r26, 0x06	; 6
 af2:	ce 01       	movw	r24, r28
 af4:	df 91       	pop	r29
 af6:	cf 91       	pop	r28
 af8:	1f 91       	pop	r17
 afa:	0f 91       	pop	r16
 afc:	08 95       	ret

00000afe <__ultoa_invert>:
 afe:	fa 01       	movw	r30, r20
 b00:	aa 27       	eor	r26, r26
 b02:	28 30       	cpi	r18, 0x08	; 8
 b04:	51 f1       	breq	.+84     	; 0xb5a <__ultoa_invert+0x5c>
 b06:	20 31       	cpi	r18, 0x10	; 16
 b08:	81 f1       	breq	.+96     	; 0xb6a <__ultoa_invert+0x6c>
 b0a:	e8 94       	clt
 b0c:	6f 93       	push	r22
 b0e:	6e 7f       	andi	r22, 0xFE	; 254
 b10:	6e 5f       	subi	r22, 0xFE	; 254
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	af 4f       	sbci	r26, 0xFF	; 255
 b1a:	b1 e0       	ldi	r27, 0x01	; 1
 b1c:	3e d0       	rcall	.+124    	; 0xb9a <__ultoa_invert+0x9c>
 b1e:	b4 e0       	ldi	r27, 0x04	; 4
 b20:	3c d0       	rcall	.+120    	; 0xb9a <__ultoa_invert+0x9c>
 b22:	67 0f       	add	r22, r23
 b24:	78 1f       	adc	r23, r24
 b26:	89 1f       	adc	r24, r25
 b28:	9a 1f       	adc	r25, r26
 b2a:	a1 1d       	adc	r26, r1
 b2c:	68 0f       	add	r22, r24
 b2e:	79 1f       	adc	r23, r25
 b30:	8a 1f       	adc	r24, r26
 b32:	91 1d       	adc	r25, r1
 b34:	a1 1d       	adc	r26, r1
 b36:	6a 0f       	add	r22, r26
 b38:	71 1d       	adc	r23, r1
 b3a:	81 1d       	adc	r24, r1
 b3c:	91 1d       	adc	r25, r1
 b3e:	a1 1d       	adc	r26, r1
 b40:	20 d0       	rcall	.+64     	; 0xb82 <__ultoa_invert+0x84>
 b42:	09 f4       	brne	.+2      	; 0xb46 <__ultoa_invert+0x48>
 b44:	68 94       	set
 b46:	3f 91       	pop	r19
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	26 9f       	mul	r18, r22
 b4c:	11 24       	eor	r1, r1
 b4e:	30 19       	sub	r19, r0
 b50:	30 5d       	subi	r19, 0xD0	; 208
 b52:	31 93       	st	Z+, r19
 b54:	de f6       	brtc	.-74     	; 0xb0c <__ultoa_invert+0xe>
 b56:	cf 01       	movw	r24, r30
 b58:	08 95       	ret
 b5a:	46 2f       	mov	r20, r22
 b5c:	47 70       	andi	r20, 0x07	; 7
 b5e:	40 5d       	subi	r20, 0xD0	; 208
 b60:	41 93       	st	Z+, r20
 b62:	b3 e0       	ldi	r27, 0x03	; 3
 b64:	0f d0       	rcall	.+30     	; 0xb84 <__ultoa_invert+0x86>
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0x5c>
 b68:	f6 cf       	rjmp	.-20     	; 0xb56 <__ultoa_invert+0x58>
 b6a:	46 2f       	mov	r20, r22
 b6c:	4f 70       	andi	r20, 0x0F	; 15
 b6e:	40 5d       	subi	r20, 0xD0	; 208
 b70:	4a 33       	cpi	r20, 0x3A	; 58
 b72:	18 f0       	brcs	.+6      	; 0xb7a <__ultoa_invert+0x7c>
 b74:	49 5d       	subi	r20, 0xD9	; 217
 b76:	31 fd       	sbrc	r19, 1
 b78:	40 52       	subi	r20, 0x20	; 32
 b7a:	41 93       	st	Z+, r20
 b7c:	02 d0       	rcall	.+4      	; 0xb82 <__ultoa_invert+0x84>
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__ultoa_invert+0x6c>
 b80:	ea cf       	rjmp	.-44     	; 0xb56 <__ultoa_invert+0x58>
 b82:	b4 e0       	ldi	r27, 0x04	; 4
 b84:	a6 95       	lsr	r26
 b86:	97 95       	ror	r25
 b88:	87 95       	ror	r24
 b8a:	77 95       	ror	r23
 b8c:	67 95       	ror	r22
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__ultoa_invert+0x86>
 b92:	00 97       	sbiw	r24, 0x00	; 0
 b94:	61 05       	cpc	r22, r1
 b96:	71 05       	cpc	r23, r1
 b98:	08 95       	ret
 b9a:	9b 01       	movw	r18, r22
 b9c:	ac 01       	movw	r20, r24
 b9e:	0a 2e       	mov	r0, r26
 ba0:	06 94       	lsr	r0
 ba2:	57 95       	ror	r21
 ba4:	47 95       	ror	r20
 ba6:	37 95       	ror	r19
 ba8:	27 95       	ror	r18
 baa:	ba 95       	dec	r27
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__ultoa_invert+0xa2>
 bae:	62 0f       	add	r22, r18
 bb0:	73 1f       	adc	r23, r19
 bb2:	84 1f       	adc	r24, r20
 bb4:	95 1f       	adc	r25, r21
 bb6:	a0 1d       	adc	r26, r0
 bb8:	08 95       	ret

00000bba <__prologue_saves__>:
 bba:	2f 92       	push	r2
 bbc:	3f 92       	push	r3
 bbe:	4f 92       	push	r4
 bc0:	5f 92       	push	r5
 bc2:	6f 92       	push	r6
 bc4:	7f 92       	push	r7
 bc6:	8f 92       	push	r8
 bc8:	9f 92       	push	r9
 bca:	af 92       	push	r10
 bcc:	bf 92       	push	r11
 bce:	cf 92       	push	r12
 bd0:	df 92       	push	r13
 bd2:	ef 92       	push	r14
 bd4:	ff 92       	push	r15
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	cd b7       	in	r28, 0x3d	; 61
 be0:	de b7       	in	r29, 0x3e	; 62
 be2:	ca 1b       	sub	r28, r26
 be4:	db 0b       	sbc	r29, r27
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	09 94       	ijmp

00000bf2 <__epilogue_restores__>:
 bf2:	2a 88       	ldd	r2, Y+18	; 0x12
 bf4:	39 88       	ldd	r3, Y+17	; 0x11
 bf6:	48 88       	ldd	r4, Y+16	; 0x10
 bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 c00:	9b 84       	ldd	r9, Y+11	; 0x0b
 c02:	aa 84       	ldd	r10, Y+10	; 0x0a
 c04:	b9 84       	ldd	r11, Y+9	; 0x09
 c06:	c8 84       	ldd	r12, Y+8	; 0x08
 c08:	df 80       	ldd	r13, Y+7	; 0x07
 c0a:	ee 80       	ldd	r14, Y+6	; 0x06
 c0c:	fd 80       	ldd	r15, Y+5	; 0x05
 c0e:	0c 81       	ldd	r16, Y+4	; 0x04
 c10:	1b 81       	ldd	r17, Y+3	; 0x03
 c12:	aa 81       	ldd	r26, Y+2	; 0x02
 c14:	b9 81       	ldd	r27, Y+1	; 0x01
 c16:	ce 0f       	add	r28, r30
 c18:	d1 1d       	adc	r29, r1
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	ed 01       	movw	r28, r26
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
